<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="REGRA_PKG" directorySegmentName="seg_0" id="3DE10463-73DC-4DC6-EF70-8D29A36E751A">
<sourceConnName>Sys</sourceConnName>
<sourceObjSchema>REGRA</sourceObjSchema>
<sourceObjName>REGRA_PKG</sourceObjName>
<createdBy>Afonso</createdBy>
<createdTime>2014-11-20 23:16:20 UTC</createdTime>
<generatorID>Gerado pelo usuário</generatorID>
<ownerDesignName>ModeloRegra</ownerDesignName>
<owner>661CF81E-3910-E06C-C58A-4E9845C5EBDD</owner>
<source>CREATE OR REPLACE PACKAGE       REGRA.REGRA_PKG AS&lt;br/&gt;	&lt;br/&gt;	name_file_pl	varchar2(200); -- variável para armazenar o nome do arquivo pl.&lt;br/&gt;	name_log		varchar2(50); -- variável para armazenar o nome do log.&lt;br/&gt;	&lt;br/&gt;	-- procedure responsável por realizar a execução dos selects e criar o arquivo pl.&lt;br/&gt;    PROCEDURE spu_generate_file_id (id_aluno IN NUMBER);&lt;br/&gt;	&lt;br/&gt;	-- procedure responsável por realizar a impressão das saídas para depuração. &lt;br/&gt;	PROCEDURE put_line (text IN VARCHAR2);&lt;br/&gt;	&lt;br/&gt;	-- procedure responsável por realizar a impressão das saídas para o arquivo pl.&lt;br/&gt;	PROCEDURE print_line_pl (text IN VARCHAR2, id IN NUMBER);&lt;br/&gt;	&lt;br/&gt;	-- função responsável por gerar o nome do arquivo.&lt;br/&gt;	FUNCTION get_name_file_pl (id_aluno IN NUMBER)&lt;br/&gt;		RETURN VARCHAR2;&lt;br/&gt;		&lt;br/&gt;	PROCEDURE spu_boot_file_pl (id_aluno IN NUMBER);&lt;br/&gt;	&lt;br/&gt;	end REGRA_PKG;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="REGRA_PKG" id="3DE10463-73DC-4DC6-EF70-8D29A36E751A">
<sourceConnName>Sys</sourceConnName>
<sourceObjSchema>REGRA</sourceObjSchema>
<sourceObjName>REGRA_PKG</sourceObjName>
<createdBy>Afonso</createdBy>
<createdTime>2014-11-20 23:16:20 UTC</createdTime>
<generatorID>Gerado pelo usuário</generatorID>
<ownerDesignName>ModeloRegra</ownerDesignName>
<owner>661CF81E-3910-E06C-C58A-4E9845C5EBDD</owner>
<source>CREATE OR REPLACE PACKAGE BODY       REGRA.REGRA_PKG&lt;br/&gt;IS&lt;br/&gt;&lt;br/&gt;PROCEDURE spu_generate_file_id (id_aluno IN NUMBER)&lt;br/&gt;IS&lt;br/&gt;    v_fato	varchar(4000);&lt;br/&gt;    v_regra	varchar(4000);&lt;br/&gt;	v_condicao	varchar(4000);&lt;br/&gt;	c_fato	SYS_REFCURSOR;&lt;br/&gt;	c_regra	SYS_REFCURSOR;&lt;br/&gt;	&lt;br/&gt;BEGIN&lt;br/&gt;	spu_boot_file_pl (id_aluno);&lt;br/&gt;	OPEN c_fato FOR (&lt;br/&gt;	&apos;SELECT &lt;br/&gt;		LOWER( replace(replace(REGRA.VERBO.VERBO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) &lt;br/&gt;			|| &apos;&apos;(&apos;&apos;||&lt;br/&gt;		LOWER( replace(replace(REGRA.ALUNO.NOME,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;))&lt;br/&gt;			||&apos;&apos;,&apos;&apos;||&lt;br/&gt;		LOWER(replace(replace(REGRA.HABITO.HABITO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;))&lt;br/&gt;			||&apos;&apos;).&apos;&apos;&lt;br/&gt;			as habito&lt;br/&gt;		FROM REGRA.FATO&lt;br/&gt;		INNER JOIN REGRA.HABITO_VERBO&lt;br/&gt;		ON REGRA.HABITO_VERBO.ID = REGRA.FATO.HABITO_VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.VERBO&lt;br/&gt;		ON REGRA.VERBO.ID = REGRA.HABITO_VERBO.VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.HABITO&lt;br/&gt;		ON REGRA.HABITO.ID = REGRA.HABITO_VERBO.VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.ALUNO&lt;br/&gt;		ON REGRA.ALUNO.ID = REGRA.FATO.ALUNO_ID&lt;br/&gt;		where REGRA.FATO.ALUNO_ID =&apos;||id_aluno&lt;br/&gt;	);&lt;br/&gt;	&lt;br/&gt;	LOOP&lt;br/&gt;			/* lê um registro do cursor */&lt;br/&gt;			FETCH c_fato INTO v_fato;&lt;br/&gt;			/* abandona o loop caso seja o final do cursor */&lt;br/&gt;			EXIT WHEN c_fato%NOTFOUND;&lt;br/&gt;			&lt;br/&gt;			print_line_pl(v_fato,id_aluno);&lt;br/&gt;			&lt;br/&gt;	END  LOOP;&lt;br/&gt;	close c_fato;&lt;br/&gt;	OPEN c_regra FOR (&apos;SELECT &lt;br/&gt;		  &apos;&apos;cursoEscolhido(X,&apos;&apos;|| (LOWER( replace(replace(REGRA.CURSO.CURSO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) || &apos;&apos;) := &apos;&apos;) as curso,&lt;br/&gt;		  LISTAGG((LOWER( replace(replace(REGRA.VERBO.VERBO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) ||&apos;&apos;(X,&apos;&apos;|| LOWER( replace(replace(REGRA.HABITO.HABITO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) ||&apos;&apos;)&apos;&apos;), &apos;&apos;, &apos;&apos;) WITHIN GROUP (ORDER BY (&apos;&apos;cursoEscolhido(X,&apos;&apos;|| (LOWER( replace(replace(REGRA.CURSO.CURSO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) || &apos;&apos;) := &apos;&apos;))) ||&apos;&apos;.&apos;&apos; as regra&lt;br/&gt;		FROM REGRA.REGRA&lt;br/&gt;		INNER JOIN REGRA.HABITO_VERBO&lt;br/&gt;		ON REGRA.HABITO_VERBO.ID = REGRA.REGRA.HABITO_VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.VERBO&lt;br/&gt;		ON REGRA.VERBO.ID = REGRA.HABITO_VERBO.VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.HABITO&lt;br/&gt;		ON REGRA.HABITO.ID = REGRA.HABITO_VERBO.VERBO_ID&lt;br/&gt;		INNER JOIN REGRA.CURSO&lt;br/&gt;		ON REGRA.CURSO.ID = REGRA.REGRA.CURSO_ID&lt;br/&gt;		group by regra.regra.regra_pai_id,(&apos;&apos;cursoEscolhido(X,&apos;&apos;|| (LOWER( replace(replace(REGRA.CURSO.CURSO,&apos;&apos; &apos;&apos;,&apos;&apos;&apos;&apos;),&apos;&apos;,&apos;&apos;,&apos;&apos;&apos;&apos;)) || &apos;&apos;) := &apos;&apos;))&apos;);&lt;br/&gt;		&lt;br/&gt;	LOOP&lt;br/&gt;			/* lê um registro do cursor */&lt;br/&gt;			FETCH c_regra INTO v_regra,v_condicao;&lt;br/&gt;			/* abandona o loop caso seja o final do cursor */&lt;br/&gt;			EXIT WHEN c_regra%NOTFOUND;&lt;br/&gt;			&lt;br/&gt;			print_line_pl(v_regra||v_condicao,id_aluno);&lt;br/&gt;			&lt;br/&gt;	END  LOOP;&lt;br/&gt;	close c_regra;&lt;br/&gt;	&lt;br/&gt;EXCEPTION&lt;br/&gt;			-- caso haja uma exceção, mostra a exceção.&lt;br/&gt;			WHEN others THEN&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;				put_line(&apos;Erro spu_generate_file_id &apos;||sqlerrm);&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;END&lt;br/&gt;	spu_generate_file_id;	&lt;br/&gt;	&lt;br/&gt;&lt;br/&gt;PROCEDURE spu_boot_file_pl (id_aluno IN NUMBER)&lt;br/&gt;IS&lt;br/&gt;	f  utl_file.file_type;&lt;br/&gt;    file_name VARCHAR2(50);&lt;br/&gt;BEGIN&lt;br/&gt;	put_line(get_name_file_pl(id_aluno));&lt;br/&gt;    file_name := get_name_file_pl(id_aluno);&lt;br/&gt;    f := utl_file.fopen (&apos;PL_DATA&apos;, file_name, &apos;W&apos;);&lt;br/&gt;    utl_file.put_line ( f, &apos;&apos;);&lt;br/&gt;    utl_file.fclose (f);    &lt;br/&gt;EXCEPTION&lt;br/&gt;			-- caso haja uma exceção, mostra a exceção.&lt;br/&gt;			WHEN others THEN&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;				put_line(&apos;Erro spu_boot_file_pl &apos;||sqlerrm);&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;END&lt;br/&gt;	spu_boot_file_pl;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;FUNCTION get_name_file_pl (id_aluno IN NUMBER)&lt;br/&gt;		RETURN VARCHAR2&lt;br/&gt;		IS&lt;br/&gt;			file_name VARCHAR2(50);		&lt;br/&gt;		BEGIN&lt;br/&gt;			name_file_pl  := &apos;A&apos; || id_aluno;&lt;br/&gt;			file_name := name_file_pl||&apos;_&apos; || to_char(trunc(SYSDATE),&apos;ddmmyyyy&apos;) ||&apos;.pl&apos;;&lt;br/&gt;			-- retorna a string concatenada&lt;br/&gt;			RETURN file_name;&lt;br/&gt;		EXCEPTION&lt;br/&gt;			-- caso haja uma execeção, mostra a exceção e faz o rollback da transação &lt;br/&gt;			WHEN others THEN&lt;br/&gt;				put_line(&apos;&apos;);&lt;br/&gt;				put_line(sqlcode || &apos; &apos;||sqlerrm);&lt;br/&gt;				put_line(&apos;&apos;);&lt;br/&gt;			ROLLBACK;&lt;br/&gt;END&lt;br/&gt;		get_name_file_pl;&lt;br/&gt;&lt;br/&gt;-- procedure responsável por realizar a impressão das saídas para o arquivo pl. &lt;br/&gt;PROCEDURE print_line_pl (text IN VARCHAR2, id IN NUMBER)&lt;br/&gt;IS&lt;br/&gt;    f  utl_file.file_type;&lt;br/&gt;    file_name VARCHAR2(50);&lt;br/&gt;BEGIN&lt;br/&gt;    file_name := get_name_file_pl(id);&lt;br/&gt;    f := utl_file.fopen (&apos;PL_DATA&apos;, file_name, &apos;A&apos;);&lt;br/&gt;    utl_file.put_line ( f, text);&lt;br/&gt;    utl_file.fclose (f);&lt;br/&gt;    &lt;br/&gt;    dbms_output.put_line(text);&lt;br/&gt;	EXCEPTION&lt;br/&gt;			-- caso haja uma exceção, mostra a exceção.&lt;br/&gt;			WHEN others THEN&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;				put_line(&apos;Erro print_line_pl &apos;||sqlerrm);&lt;br/&gt;				put_line(&apos; -- &apos;);&lt;br/&gt;END&lt;br/&gt;	print_line_pl;	&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;-- procedure resposável por gerar os logs da execução&lt;br/&gt;PROCEDURE put_line (text IN VARCHAR2) &lt;br/&gt;IS&lt;br/&gt;    f  utl_file.file_type;&lt;br/&gt;    file_name VARCHAR2(50);&lt;br/&gt;BEGIN&lt;br/&gt;    file_name := name_log||&apos;_&apos; || to_char(trunc(SYSDATE),&apos;ddmmyyyy&apos;) ||&apos;.log&apos;;&lt;br/&gt;    f := utl_file.fopen (&apos;LOG_DATA&apos;, file_name, &apos;A&apos;);&lt;br/&gt;    utl_file.put_line ( f, text);&lt;br/&gt;    utl_file.fclose (f);&lt;br/&gt;    dbms_output.put_line(text);&lt;br/&gt;	EXCEPTION&lt;br/&gt;			-- caso haja uma exceção, mostra a exceção.&lt;br/&gt;			WHEN others THEN&lt;br/&gt;				dbms_output.put_line(&apos;&apos;);&lt;br/&gt;				dbms_output.put_line(sqlerrm);&lt;br/&gt;				dbms_output.put_line(&apos;&apos;);&lt;br/&gt;END&lt;br/&gt;	put_line;	&lt;br/&gt;end REGRA_PKG;</source>
</body>
</PackageOracle>